diff --git a/index.d.ts b/index.d.ts
index 0fd476f7ed146a984af470c5c826e17b70fe53c0..56fd39aab7993d308aad1ce3fdd692c8139cb008 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -25,7 +25,7 @@ import type {
 } from 'playwright/test';
 import type { JsonObject } from '@playwright/experimental-ct-core/types/component';
 import type { InlineConfig } from 'vite';
-import type { SvelteComponent, ComponentProps } from 'svelte/types/runtime';
+import type { SvelteComponent, ComponentProps, ComponentEvents } from 'svelte';
 
 export type PlaywrightTestConfig<T = {}, W = {}> = Omit<BasePlaywrightTestConfig<T, W>, 'use'> & {
   use?: BasePlaywrightTestConfig<T, W>['use'] & {
@@ -36,29 +36,27 @@ export type PlaywrightTestConfig<T = {}, W = {}> = Omit<BasePlaywrightTestConfig
   };
 };
 
-type ComponentSlot = string | string[];
-type ComponentSlots = Record<string, ComponentSlot> & { default?: ComponentSlot };
-type ComponentEvents = Record<string, Function>;
-
-export interface MountOptions<HooksConfig extends JsonObject, Component extends SvelteComponent> {
-  props?: ComponentProps<Component>;
-  slots?: ComponentSlots;
-  on?: ComponentEvents;
-  hooksConfig?: HooksConfig;
-}
+type HTMLString = string & {};
+export type MountOptions<Component extends SvelteComponent>= {
+    slots?: Partial<Record<keyof Component['$$slot_def'], HTMLString>>;
+    on?: {[K in keyof ComponentEvents<Component>]?: (event: ComponentEvents<Component>[K]) => void};
+    hooksConfig?: JsonObject;
+  } & ( Record<never,any> extends ComponentProps<Component> 
+    ? {props?:ComponentProps<Component> }
+    : {props:ComponentProps<Component> } )
 
 interface MountResult<Component extends SvelteComponent> extends Locator {
   unmount(): Promise<void>;
   update(options: {
     props?: Partial<ComponentProps<Component>>;
-    on?: Partial<ComponentEvents>;
+    on?: Partial<ComponentEvents<Component>>;
   }): Promise<void>;
 }
 
 interface ComponentFixtures {
-  mount<HooksConfig extends JsonObject, Component extends SvelteComponent = SvelteComponent>(
+  mount<Component extends SvelteComponent = SvelteComponent>(
     component: new (...args: any[]) => Component,
-    options?: MountOptions<HooksConfig, Component>
+    options: MountOptions<Component>
   ): Promise<MountResult<Component>>;
 }
 
